version: 2.1
orbs: 
  slack: circleci/slack@4.9.4 

commands:
  set-db-environment:
    description: Set backend db environment variables
    steps:
      - run:
          name: Setting database environment variables
          when: always
          command: |
            cd backend
            touch .env
            echo ANSIBLE_HOST_KEY_CHECKING=False > ".env"
            echo ENVIRONMENT=production >> ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            cat .env
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/.env
  
  get-commit-message:
    description: Get commit message
    steps:
      - run:
          name: Store commit message into variable
          when: always
          command: |
            echo "export COMMIT_MESSAGE=\"$(git log --format=%B -n 1 $CIRCLE_SHA1)\"" > $BASH_ENV
            source $BASH_ENV

  slack-fail-notify:
    description: Send fail notification to slack
    steps:
      - get-commit-message
      - slack/notify:
          channel: C03DMCHUSNN
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": ":red_circle: Job Failed. :red_circle:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Project: *$CIRCLE_PROJECT_REPONAME ($CIRCLE_BRANCH)* \n\nAuthor: $CIRCLE_USERNAME\nCommit: $COMMIT_MESSAGE\nJob: $CIRCLE_JOB"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }
            
  destroy_environment:
    description: Destroy Cloud Formation Stacks and infrastructure
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy udapeople backend cfn stack
          command: |
            aws cloudformation delete-stack --stack-name prj-cicd-backend-<< parameters.id >>
          when: << parameters.when >>
      - run:
          name: Destroy udapeople frontend cfn stack
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name prj-cicd-frontend-<< parameters.id >>
          when: << parameters.when >>

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

      - slack-fail-notify

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

      - slack-fail-notify


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test

      - slack-fail-notify
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

      - slack-fail-notify

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
        
      - slack-fail-notify

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: Test backend-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

      - slack-fail-notify

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:2.6.3
    steps:
      - checkout
      - run:
          name: Install prerequsites
          command: |
            yum -y install tar gzip
      - run:
          name: Deploy back-end infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=cicd \
              --stack-name "prj-cicd-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Deploy front-end infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=cicd \
              --stack-name "prj-cicd-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_URL=`aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].[PublicDnsName]" \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text | tr -d '\n'`
            echo $BACKEND_URL >> .circleci/ansible/inventory.txt
            echo $BACKEND_URL
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - slack-fail-notify
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail    

  configure-infrastructure:
    docker:
      - image: willhallonline/ansible:2.11-alpine-3.15
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "24:94:98:1f:06:3c:44:58:6a:cc:50:99:61:db:91:a7:cd:a4:a7:10"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook  configure-server.yml -i inventory.txt

      - slack-fail-notify 
      - run:
          name: Install AWS CLI for rollback
          when: on_fail
          command: |
            pip3 install --upgrade pip
            pip3 install awscli    
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail  

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo Success
              echo "insecure" >> ~/.curlrc
              curl https://kvdb.io/PMu5wfvhz9uc1oXTWXfWff/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi

      - slack-fail-notify    
      - run:
          name: Install AWS CLI for rollback
          when: on_fail
          command: |
            sudo apt update && sudo apt upgrade -y
            sudo apt install software-properties-common
            sudo add-apt-repository ppa:deadsnakes/ppa
            sudo apt install python3.9
            pip3 install --upgrade pip
            pip3 install awscli  
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail      

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
